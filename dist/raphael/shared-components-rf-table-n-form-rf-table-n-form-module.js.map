{"version":3,"sources":["./src/app/shared/components/rf-table-n-form/dynamic-table/dynamic-table.component.ts","./src/app/shared/components/rf-table-n-form/dynamic-table/dynamic-table.component.html","./src/app/shared/components/rf-table-n-form/dynamic-form/dynamic-form-field-set/dynamic-form-field-set.component.ts","./src/app/shared/components/rf-table-n-form/dynamic-form/dynamic-form-field-set/dynamic-form-field-set.component.html","./src/app/shared/components/rf-table-n-form/dynamic-form/dynamic-form.component.ts","./src/app/shared/components/rf-table-n-form/dynamic-form/dynamic-form.component.html","./src/app/shared/components/rf-table-n-form/rf-table-n-form.component.ts","./src/app/shared/components/rf-table-n-form/rf-table-n-form.component.html","./src/app/shared/components/rf-table-n-form/rf-table-n-form.module.ts","./src/app/shared/components/rf-table-n-form/rf-table-n-form-routing.module.ts"],"names":[],"mappings":"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","file":"shared-components-rf-table-n-form-rf-table-n-form-module.js","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\n\nimport { FieldType } from '../../../constants/field-info';\n\n@Component({\n  selector: 'app-dynamic-table',\n  templateUrl: './dynamic-table.component.html',\n  styleUrls: ['./dynamic-table.component.scss']\n})\nexport class DynamicTableComponent implements OnInit {\n\n  @Input() colFields: Array<FieldType<string>> = [] as Array<FieldType<string>>;\n  @Input() colData: any;\n  @Output() onEdit = new EventEmitter<FieldType<any>>();\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  onEditForm(rowData: FieldType<any>) {\n    this.onEdit.emit(rowData)\n  }\n\n}\n","<div class=\"col-12 table-responsive\">\n    <!-----------TABLE------------ -->\n    <table class=\"table\">\n      <!------------ HEADERS --------------->\n      <thead>\n        <tr>\n          <th scope=\"col\" *ngFor=\"let columnHead of colFields\">\n            {{ columnHead.label }}\n          </th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n  \n      <!---------------CONTENT--------------- -->\n      <tbody>\n        <tr *ngFor=\"let columnData of colData; let i = index\">\n         \n          <td\n            title=\"{{ columnHead.label }}\"\n            *ngFor=\"let columnHead of colFields\"\n          >\n            <ng-container *ngIf = \"columnHead.key == 'createdOn';else shortdates\">\n              {{ columnData[columnHead.key]  | date:'medium' }}\n            </ng-container>\n            <ng-template #shortdates>\n              <ng-container *ngIf = \"columnHead.type == 'date'; else othertypes\">  {{ columnData[columnHead.key]  | date:'shortDate' }}</ng-container>\n            </ng-template>\n            <ng-template #othertypes>  {{ columnData[columnHead.key] }}</ng-template>\n\n          </td>\n          <td title=\"Actions\" class=\"actions-blk\">\n            <div class=\"btn-container d-flex justify-space-around\">\n              <button\n                type=\"button\"\n                class=\"btn btn-icon btn-primary rounded-circle\"\n                (click)=\"onEditForm(columnData)\"\n              >\n                <i class=\"bi bi-pencil-square\"></i>\n              </button>\n  \n              <button\n                type=\"button\"\n                class=\"btn btn-primary btn-icon rounded-circle\"\n              >\n                <i class=\"bi bi-trash\"></i>\n              </button>\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n","import { Component,  Input, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { FieldType } from '../../../../constants/field-info';\n\n@Component({\n  selector: 'app-dynamic-form-field-set',\n  templateUrl: './dynamic-form-field-set.component.html',\n  styleUrls: ['./dynamic-form-field-set.component.scss']\n})\nexport class DynamicFormFieldSetComponent implements OnInit {\n\n  @Input() field!: FieldType<any>;\n  @Input() form!: FormGroup;\n  formControlGetter : FormControl = new FormControl();\n\n  constructor() {\n    \n  }\n\n  ngOnInit(): void {\n    this.formControlGetter = this.form.get(this.field.key) as FormControl;\n  }\n\n}\n","<div [formGroup]=\"form\" class=\"form-group\">\n  <label [attr.for]=\"field.key\" class=\"form-label\">{{ field.label }}</label>\n\n  <div [ngSwitch]=\"field.type\">\n    <!-- IF DATE FIELD -->\n    <input\n      type=\"date\"\n      class=\"form-control\"\n      [id]=\"field.key\"\n      *ngSwitchCase=\"'date'\"\n      [formControlName]=\"field.key\"\n    />\n\n    <!-- IF DROP DOWN -->\n    <select\n      [id]=\"field.key\"\n      class=\"form-control\"\n      *ngSwitchCase=\"'dropdown'\"\n      [formControlName]=\"field.key\"\n    >\n      <option *ngFor=\"let opt of field.options\" [value]=\"opt.key\">\n        {{ opt.value }}\n      </option>\n    </select>\n\n    <!-- IF CHECKBOX -->\n    <div class=\"form-check custom-checkbox\" *ngSwitchCase=\"'checkbox'\">\n      <input\n        type=\"checkbox\"\n        class=\"form-check-input\"\n        [id]=\"field.key\"\n        [formControlName]=\"field.key\"\n      />\n    </div>\n\n    <!-- ELSE THE REST OF TEXT FIELDS -->\n    <input\n      *ngSwitchDefault\n      class=\"form-control\"\n      [formControlName]=\"field.key\"\n      [id]=\"field.key\"\n      [type]=\"field.type\"\n    />\n  </div>\n\n  <!-- <div class=\"errorMessage\" *ngIf=\"!isValid\">{{ field.label }} is required</div> -->\n\n  <!-- DISPLAYING ERROR MESSAGE BASED ON VALIDATION ERROR TYPE ( REQUIRED,...) -->\n  <!-- NEED TO ADD MORE ERROR MESSAGES  -->\n  <div\n    *ngIf=\"\n      formControlGetter &&\n      formControlGetter.invalid &&\n      formControlGetter.errors &&\n      (formControlGetter.dirty || formControlGetter.touched)\n    \"\n  >\n    <small class=\"text-danger\" *ngIf=\"formControlGetter.hasError('required')\">\n      This field is required.\n    </small>\n    <!-- <small class=\"text-danger\"\n        *ngIf=\"form.get(field.key).hasError('minlength')\">\n        The minimum length for this field is {{form.get(field.key).errors.minlength.requiredLength}} characters.\n    </small>\n    <small class=\"text-danger\"\n        *ngIf=\"form.get(field.key).hasError('maxlength')\">\n        The maximum length for this field is {{form.get(field.key).errors.maxlength.requiredLength}} characters.\n    </small> -->\n    <!-- </div> -->\n  </div>\n</div>\n","\nimport { Component, EventEmitter, Input, OnInit, Output, resolveForwardRef, SimpleChange } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { ConfigService } from 'src/app/shared/services/config.service';\nimport { RfTableNFormService } from 'src/app/shared/services/rf-table-n-form.service';\nimport { FieldType } from '../../../constants/field-info';\n\n@Component({\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  styleUrls: ['./dynamic-form.component.scss'],\n\n})\nexport class DynamicFormComponent implements OnInit {\n  @Input() dynFields: FieldType<string>[] = [];\n  @Output() closeModal: EventEmitter<any> = new EventEmitter();\n  form!: FormGroup;\n  payLoad = '';\n  constructor(private tfService: RfTableNFormService, private configServ: ConfigService) { }\n\n  ngOnInit(): void {\n  }\n\n  ngOnChanges(c: SimpleChange) {\n    // convert to reactive form group and controls\n\n    this.form = this.tfService.toFormGroup(this.dynFields);\n\n  }\n\n  onSubmit() {\n\n    // By Default, date format is formcontrol is 'mm/dd/yyyy', here it is transformed into utc format\n    const dateFields = this.dynFields.filter(obj => obj.type === 'date');\n\n    if (dateFields.length > 0)\n      dateFields.map((obj: FieldType<any>) => {\n        const str = obj['key'].toString();\n        this.form.value[str] = new Date(this.form.value[str])\n      }\n      );\n\n    this.payLoad = JSON.stringify(this.form.value);\n    if (this.form.valid) {\n      const page = this.tfService.getCurrentPage();\n      if(!page) return;\n\n      this.configServ.postFormData(page, this.form.value).subscribe(response => {\n        console.log(response);\n        this.form.reset();\n        this.closeModal.emit();\n      }\n      )\n    }\n  }\n\n  onEditForm(formData: FieldType<any>) {\n    this.form.patchValue(formData);\n  }\n}\n","<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\" class=\"row\" *ngIf=\"dynFields\">\n  <ng-container *ngFor=\"let field of dynFields\">\n    <app-dynamic-form-field-set\n      [field]=\"field\"\n      [form]=\"form\"\n      class=\"col-md-6\"\n    ></app-dynamic-form-field-set>\n  </ng-container>\n\n  <div class=\"col-md-12 py-2\">\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"onSubmit()\">\n      Submit\n    </button>\n  </div>\n</form>\n\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ConfigService } from '../../services/config.service';\nimport { RfTableNFormService } from '../../services/rf-table-n-form.service';\nimport { RfModalComponent } from '../rf-modal/rf-modal.component';\nimport { DynamicFormComponent } from './dynamic-form/dynamic-form.component';\nimport { FieldType } from '../../constants/field-info';\n\n@Component({\n  selector: 'app-rf-table-n-form',\n  templateUrl: './rf-table-n-form.component.html',\n  styleUrls: ['./rf-table-n-form.component.scss'],\n})\nexport class RfTableNFormComponent implements OnInit {\n  readonly filterFields = ['id', 'createdOn', 'orgUniqueId'];\n\n  selectedPage: string = '';\n  tableContent: any;\n  dynFields: Array<FieldType<string>> = [] as Array<FieldType<string>>;\n  isLoading: boolean = false;\n  @ViewChild(DynamicFormComponent) private dynFormElt!: DynamicFormComponent;\n  @ViewChild(RfModalComponent) private rfmodal!: RfModalComponent;\n\n  constructor(\n    private route: ActivatedRoute,\n    private rfService: RfTableNFormService,\n    private configSer: ConfigService,\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.subscribe((params) => {\n      // get selected page from sidenav\n      this.selectedPage = params['pagename'];\n      if (this.selectedPage) {\n        // get field names, and info related to it.\n        this.rfService.setCurrentPage(this.selectedPage);\n\n        // REMOVING FIELDS SUCH AS ID, CREATEDON,... CZ THOSE ARE NOT DISPLAYED IN THE FORM\n        this.dynFields = this.rfService\n          .getFields(this.selectedPage)\n          .filter((field:FieldType<any>) => this.filterFields.indexOf(field.key) == -1);\n\n          // GET ALL DATA FOR TABLE\n        this.getAllData(this.selectedPage);\n      }\n    });\n  }\n\n  // EDIT FORM\n  edit(colData: FieldType<any>) {\n    this.dynFormElt.onEditForm(colData);\n    this.rfmodal.open();\n  }\n\n  getAllData(page: string) {\n    this.isLoading = true;\n    this.tableContent = [];\n    if (!page) {\n      return;\n    }\n    // POPULATE TABLE'S DATA\n    this.configSer.getAllData(page).subscribe((data) => {\n      this.tableContent = data;\n      this.isLoading = false;\n    }, (err)=>{\n      this.isLoading = false;\n      alert(err)\n    });\n  }\n\n  //----------OPEN AND CLOSE MODAL-------------\n  openModal() {\n    this.rfmodal.open();\n  }\n  closeModal() {\n    this.rfmodal.close();\n    this.getAllData(this.selectedPage);\n  }\n}","<app-rf-sidenav></app-rf-sidenav>\n\n<!------------PAGE HEADER----------- -->\n<div class=\"page-title d-flex justify-content-between align-items-center px-2\">\n  <h4>{{ selectedPage }}</h4>\n\n    <button\n      type=\"button\"\n      class=\"btn btn-icon rounded-circle btn-primary px-2\"\n      (click)=\"openModal()\"\n    >\n      <i class=\"bi bi-plus\"></i>\n    </button>\n \n  \n</div>\n\n<!-------------LOADING SPINNER-------------- -->\n<app-loading-ripple  *ngIf=\"isLoading\"></app-loading-ripple>\n<!-------------------- TABLE --------------------->\n<app-dynamic-table *ngIf=\"!isLoading\"\n  [colFields]=\"dynFields\"\n  [colData]=\"tableContent\"\n  (onEdit)=\"edit($event)\"\n></app-dynamic-table>\n\n<!------------------     MODAL - FORM  ------------------ -->\n<app-rf-modal>\n  <div class=\"row py-3\">\n    <div class=\"col-12 d-flex justify-content-between\">\n      <h4 class=\"mb-3\">Add {{ selectedPage }}</h4>\n      <button\n        type=\"button\"\n        class=\"btn btn-primary btn-icon rounded-circle\"\n        (click)=\"closeModal()\"\n      >\n        <i class=\"bi bi-x\"></i>\n      </button>\n    </div>\n  </div>\n  <!--FORM -->\n  <app-dynamic-form\n    [dynFields]=\"dynFields\"\n    (closeModal)=\"closeModal()\"\n  ></app-dynamic-form>\n</app-rf-modal>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { RfTableNFormRoutingModule } from './rf-table-n-form-routing.module';\nimport { RfTableNFormComponent } from './rf-table-n-form.component';\nimport { DynamicFormComponent } from './dynamic-form/dynamic-form.component';\nimport { DynamicFormFieldSetComponent } from './dynamic-form/dynamic-form-field-set/dynamic-form-field-set.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from '../../shared.module';\nimport { DynamicTableComponent } from './dynamic-table/dynamic-table.component';\n\n\n@NgModule({\n  declarations: [RfTableNFormComponent, DynamicFormComponent,\n    DynamicFormFieldSetComponent,\n    DynamicTableComponent],\n  imports: [\n    CommonModule,\n    RfTableNFormRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SharedModule\n  ]\n})\nexport class RfTableNFormModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RfTableNFormComponent } from './rf-table-n-form.component';\n\nconst routes: Routes = [{ path: '', component: RfTableNFormComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RfTableNFormRoutingModule { }\n"],"sourceRoot":"webpack:///"}