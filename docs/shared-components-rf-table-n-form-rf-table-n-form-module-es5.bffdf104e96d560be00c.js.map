{"version":3,"sources":["webpack:///src/app/shared/components/rf-modal/rf-modal.component.ts","webpack:///src/app/shared/components/rf-modal/rf-modal.component.html","webpack:///src/app/shared/components/rf-table-n-form/dynamic-form/dynamic-form-field-set/dynamic-form-field-set.component.html","webpack:///src/app/shared/components/rf-table-n-form/dynamic-form/dynamic-form-field-set/dynamic-form-field-set.component.ts","webpack:///src/app/shared/components/rf-table-n-form/dynamic-form/dynamic-form.component.html","webpack:///src/app/shared/components/rf-table-n-form/dynamic-form/dynamic-form.component.ts","webpack:///src/app/shared/components/rf-sidenav/rf-sidenav.component.html","webpack:///src/app/shared/components/rf-sidenav/rf-sidenav.component.ts","webpack:///src/app/shared/components/rf-table-n-form/dynamic-table/dynamic-table.component.html","webpack:///src/app/shared/components/rf-table-n-form/dynamic-table/dynamic-table.component.ts","webpack:///src/app/shared/components/rf-table-n-form/rf-table-n-form.component.html","webpack:///src/app/shared/components/rf-table-n-form/rf-table-n-form-routing.module.ts","webpack:///src/app/shared/components/rf-table-n-form/rf-table-n-form.component.ts","webpack:///src/app/shared/components/rf-table-n-form/rf-table-n-form.module.ts"],"names":["RfModalComponent","el","renderer","this","element","nativeElement","event","target","className","close","appendChild","document","body","remove","setStyle","addClass","removeClass","DynamicFormFieldSetComponent","formControlGetter","form","get","field","key","DynamicFormComponent","tfService","configServ","dynFields","closeModal","payLoad","c","toFormGroup","dateFields","filter","obj","type","length","map","str","toString","value","Date","JSON","stringify","valid","page","getCurrentPage","postFormData","subscribe","response","console","log","reset","emit","formData","patchValue","RfSidenavComponent","router","authService","pageInfo","menuList","isOpen","Object","keys","pageName","navigate","menu","charAt","toUpperCase","slice","signOut","deleteAccount","resp","toggleOpen","DynamicTableComponent","colFields","onEdit","rowData","RfTableNFormComponent","RfTableNFormRoutingModule","RfTableNFormModule","routes","path","component","route","rfService","configSer","filterFields","selectedPage","isLoading","params","setCurrentPage","getFields","indexOf","getAllData","colData","dynFormElt","onEditForm","rfmodal","open","tableContent","data","err","alert","openModal","forChild"],"mappings":"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","file":"x","sourcesContent":["\nimport { Component, ViewEncapsulation, ElementRef, OnInit,  Renderer2, HostListener } from '@angular/core';\n\n\n\n@Component({\n  selector: 'app-rf-modal',\n  templateUrl: './rf-modal.component.html',\n  styleUrls: ['./rf-modal.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class RfModalComponent implements OnInit {\n\n  private element: any;\n  @HostListener('document:click', ['$event'])\n  clickout(event: Event) {\n    \n    if (event && event.target && (event.target as HTMLElement).className == \"rf-modal\") {\n      this.close();\n    }\n  }\n  constructor(private el: ElementRef, private renderer: Renderer2,) {\n    this.element = el.nativeElement;\n  }\n\n  ngOnInit(): void {\n    // move element to bottom of page (just before </body>) so it can be displayed above everything else\n    this.renderer.appendChild(document.body, this.element);\n  }\n\n  // remove self from modal service when component is destroyed\n  ngOnDestroy(): void {\n    this.element.remove();\n  }\n\n  // open modal\n  open(): void {\n    this.renderer.setStyle(this.element, 'display', 'block');\n    this.renderer.addClass(document.body, 'rf-modal-open');\n  }\n\n  // close modal\n  close(): void {\n    this.renderer.setStyle(this.element, 'display', 'none');\n    this.renderer.removeClass(document.body, 'rf-modal-open');\n  }\n\n}\n","<div class=\"rf-modal\">\n    <div class=\"rf-modal-body\">\n        <ng-content></ng-content>\n    </div>\n</div>\n<div class=\"rf-modal-background\"></div>","<div [formGroup]=\"form\" class=\"form-group\">\n  <label [attr.for]=\"field.key\" class=\"form-label\">{{ field.label }}</label>\n\n  <div [ngSwitch]=\"field.type\">\n    <!-- IF DATE FIELD -->\n    <input\n      type=\"date\"\n      class=\"form-control\"\n      [id]=\"field.key\"\n      *ngSwitchCase=\"'date'\"\n      [formControlName]=\"field.key\"\n    />\n\n    <!-- IF DROP DOWN -->\n    <select\n      [id]=\"field.key\"\n      class=\"form-control\"\n      *ngSwitchCase=\"'dropdown'\"\n      [formControlName]=\"field.key\"\n    >\n      <option *ngFor=\"let opt of field.options\" [value]=\"opt.key\">\n        {{ opt.value }}\n      </option>\n    </select>\n\n    <!-- IF CHECKBOX -->\n    <div class=\"form-check custom-checkbox\" *ngSwitchCase=\"'checkbox'\">\n      <input\n        type=\"checkbox\"\n        class=\"form-check-input\"\n        [id]=\"field.key\"\n        [formControlName]=\"field.key\"\n      />\n    </div>\n\n    <!-- ELSE THE REST OF TEXT FIELDS -->\n    <input\n      *ngSwitchDefault\n      class=\"form-control\"\n      [formControlName]=\"field.key\"\n      [id]=\"field.key\"\n      [type]=\"field.type\"\n    />\n  </div>\n\n  <!-- <div class=\"errorMessage\" *ngIf=\"!isValid\">{{ field.label }} is required</div> -->\n\n  <!-- DISPLAYING ERROR MESSAGE BASED ON VALIDATION ERROR TYPE ( REQUIRED,...) -->\n  <!-- NEED TO ADD MORE ERROR MESSAGES  -->\n  <div\n    *ngIf=\"\n      formControlGetter &&\n      formControlGetter.invalid &&\n      formControlGetter.errors &&\n      (formControlGetter.dirty || formControlGetter.touched)\n    \"\n  >\n    <small class=\"text-danger\" *ngIf=\"formControlGetter.hasError('required')\">\n      This field is required.\n    </small>\n    <!-- <small class=\"text-danger\"\n        *ngIf=\"form.get(field.key).hasError('minlength')\">\n        The minimum length for this field is {{form.get(field.key).errors.minlength.requiredLength}} characters.\n    </small>\n    <small class=\"text-danger\"\n        *ngIf=\"form.get(field.key).hasError('maxlength')\">\n        The maximum length for this field is {{form.get(field.key).errors.maxlength.requiredLength}} characters.\n    </small> -->\n    <!-- </div> -->\n  </div>\n</div>\n","import { Component,  Input, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { FieldType } from '../../../../constants/field-info';\n\n@Component({\n  selector: 'app-dynamic-form-field-set',\n  templateUrl: './dynamic-form-field-set.component.html',\n  styleUrls: ['./dynamic-form-field-set.component.scss']\n})\nexport class DynamicFormFieldSetComponent implements OnInit {\n\n  @Input() field!: FieldType<any>;\n  @Input() form!: FormGroup;\n  formControlGetter : FormControl = new FormControl();\n\n  constructor() {\n    \n  }\n\n  ngOnInit(): void {\n    this.formControlGetter = this.form.get(this.field.key) as FormControl;\n  }\n\n}\n","<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\" class=\"row\" *ngIf=\"dynFields\">\n  <ng-container *ngFor=\"let field of dynFields\">\n    <app-dynamic-form-field-set\n      [field]=\"field\"\n      [form]=\"form\"\n      class=\"col-md-6\"\n    ></app-dynamic-form-field-set>\n  </ng-container>\n\n  <div class=\"col-md-12 py-2\">\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"onSubmit()\">\n      Submit\n    </button>\n  </div>\n</form>\n\n","\nimport { Component, EventEmitter, Input, OnInit, Output, resolveForwardRef, SimpleChange } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { ConfigService } from 'src/app/shared/services/config.service';\nimport { RfTableNFormService } from 'src/app/shared/services/rf-table-n-form.service';\nimport { FieldType } from '../../../constants/field-info';\n\n@Component({\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  styleUrls: ['./dynamic-form.component.scss'],\n\n})\nexport class DynamicFormComponent implements OnInit {\n  @Input() dynFields: FieldType<string>[] = [];\n  @Output() closeModal: EventEmitter<any> = new EventEmitter();\n  form!: FormGroup;\n  payLoad = '';\n  constructor(private tfService: RfTableNFormService, private configServ: ConfigService) { }\n\n  ngOnInit(): void {\n  }\n\n  ngOnChanges(c: SimpleChange) {\n    // convert to reactive form group and controls\n\n    this.form = this.tfService.toFormGroup(this.dynFields);\n\n  }\n\n  onSubmit() {\n\n    // By Default, date format is formcontrol is 'mm/dd/yyyy', here it is transformed into utc format\n    const dateFields = this.dynFields.filter(obj => obj.type === 'date');\n\n    if (dateFields.length > 0)\n      dateFields.map((obj: FieldType<any>) => {\n        const str = obj['key'].toString();\n        this.form.value[str] = new Date(this.form.value[str])\n      }\n      );\n\n    this.payLoad = JSON.stringify(this.form.value);\n    if (this.form.valid) {\n      const page = this.tfService.getCurrentPage();\n      if(!page) return;\n\n      this.configServ.postFormData(page, this.form.value).subscribe(response => {\n        console.log(response);\n        this.form.reset();\n        this.closeModal.emit();\n      }\n      )\n    }\n  }\n\n  onEditForm(formData: FieldType<any>) {\n    this.form.patchValue(formData);\n  }\n}\n","<!-- Sidebar -->\n<div class=\"s-layout-sidebar\">\n  <!--- TRIGGER BUTTON TO OPEN AND CLOSE SIDENAV IN MOBILE VIEW --- -->\n  <div class=\"s-sidebar-trigger\">\n    <button\n      class=\"rounded-circle border-0 toggle-btn btn btn-primary btn-icon\"\n      (click)=\"toggleOpen()\"\n    >\n      <i class=\"bi bi-list\"></i>\n    </button>\n  </div>\n\n  <nav class=\"s-sidebar-nav\" [class.open]=\"isOpen\" [class.close]=\"!isOpen\">\n    <!-- JY LOGO -->\n    <a\n      title=\"Jesus Youth\"\n      href=\"/\"\n      class=\"d-flex align-items-center text-decoration-none nav-title-wrap\"\n    >\n      <img alt=\"Jesus Youth Logo\" src=\"/assets/JY_Logo.png\" />\n      <span class=\"fs-3 mx-2 nav-title\"> Raphael </span>\n    </a>\n    <hr />\n\n    <ul>\n      <!-- SIGNOUT AND DELETE -->\n      <li>\n        <a class=\"s-sidebar-nav-link\" (click)=\"signOut()\">\n          <i class=\"bi bi-box-arrow-left\"></i>\n          <em>Sign Out</em>\n        </a>\n      </li>\n\n      <li>\n        <a class=\"s-sidebar-nav-link\" (click)=\"deleteAccount()\">\n          <i class=\"bi bi-trash\"></i>\n          <em>Delete Account</em>\n        </a>\n      </li>\n\n      <hr>\n      <!-- HOME MENU ITEM -->\n\n      <li>\n        <a class=\"s-sidebar-nav-link\">\n          <i class=\"bi bi-house\"></i>\n          <em>Home</em>\n        </a>\n      </li>\n\n     \n      <!-- Page list -->\n      <li *ngFor=\"let menu of menuList\">\n        <a class=\"s-sidebar-nav-link\" (click)=\"navToPage(menu)\">\n          <i class=\"bi \" [ngClass]=\"'bi-'+ pageInfo[menu].logo\"></i>\n          <em>{{ getCapsMenuName(menu) }}</em>\n        </a>\n      </li>\n\n     \n    </ul>\n  </nav>\n</div>\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/auth/auth.service';\nimport { PageInfo, PageInfoType } from '../../constants/page-info';\n\n@Component({\n  selector: 'app-rf-sidenav',\n  templateUrl: './rf-sidenav.component.html',\n  styleUrls: ['./rf-sidenav.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class RfSidenavComponent implements OnInit {\n  pageInfo: { [key: string]: PageInfoType } = PageInfo;\n  menuList: Array<string> = [''];\n\n  constructor(\n    private router: Router,\n    private authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.menuList = Object.keys(this.pageInfo);\n  }\n\n  isOpen: boolean = false;\n\n  toggleOpen() {\n    this.isOpen = !this.isOpen;\n  }\n\n  navToPage(pageName: string) {\n    this.router.navigate(['/main', pageName]);\n  }\n\n  getCapsMenuName(menu: string) {\n    return menu.charAt(0).toUpperCase() + menu.slice(1);\n  }\n\n  signOut() {\n    this.authService.signOut();\n  }\n\n  deleteAccount() {\n    this.authService.deleteAccount()?.subscribe((resp) => console.log(resp));\n  }\n}\n","<div class=\"col-12 table-responsive\">\n    <!-----------TABLE------------ -->\n    <table class=\"table\">\n      <!------------ HEADERS --------------->\n      <thead>\n        <tr>\n          <th scope=\"col\" *ngFor=\"let columnHead of colFields\">\n            {{ columnHead.label }}\n          </th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n  \n      <!---------------CONTENT--------------- -->\n      <tbody>\n        <tr *ngFor=\"let columnData of colData; let i = index\">\n         \n          <td\n            title=\"{{ columnHead.label }}\"\n            *ngFor=\"let columnHead of colFields\"\n          >\n            <ng-container *ngIf = \"columnHead.key == 'createdOn';else shortdates\">\n              {{ columnData[columnHead.key]  | date:'medium' }}\n            </ng-container>\n            <ng-template #shortdates>\n              <ng-container *ngIf = \"columnHead.type == 'date'; else othertypes\">  {{ columnData[columnHead.key]  | date:'shortDate' }}</ng-container>\n            </ng-template>\n            <ng-template #othertypes>  {{ columnData[columnHead.key] }}</ng-template>\n\n          </td>\n          <td title=\"Actions\" class=\"actions-blk\">\n            <div class=\"btn-container d-flex justify-space-around\">\n              <button\n                type=\"button\"\n                class=\"btn btn-icon btn-primary rounded-circle\"\n                (click)=\"onEditForm(columnData)\"\n              >\n                <i class=\"bi bi-pencil-square\"></i>\n              </button>\n  \n              <button\n                type=\"button\"\n                class=\"btn btn-primary btn-icon rounded-circle\"\n              >\n                <i class=\"bi bi-trash\"></i>\n              </button>\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n","import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\n\nimport { FieldType } from '../../../constants/field-info';\n\n@Component({\n  selector: 'app-dynamic-table',\n  templateUrl: './dynamic-table.component.html',\n  styleUrls: ['./dynamic-table.component.scss']\n})\nexport class DynamicTableComponent implements OnInit {\n\n  @Input() colFields: Array<FieldType<string>> = [] as Array<FieldType<string>>;\n  @Input() colData: any;\n  @Output() onEdit = new EventEmitter<FieldType<any>>();\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  onEditForm(rowData: FieldType<any>) {\n    this.onEdit.emit(rowData)\n  }\n\n}\n","<app-rf-sidenav></app-rf-sidenav>\n\n<!------------PAGE HEADER----------- -->\n<div class=\"page-title d-flex justify-content-between align-items-center px-2\">\n  <h4>{{ selectedPage }}</h4>\n\n    <button\n      type=\"button\"\n      class=\"btn btn-icon rounded-circle btn-primary px-2\"\n      (click)=\"openModal()\"\n    >\n      <i class=\"bi bi-plus\"></i>\n    </button>\n \n  \n</div>\n\n<!-------------LOADING SPINNER-------------- -->\n<app-loading-ripple  *ngIf=\"isLoading\"></app-loading-ripple>\n<!-------------------- TABLE --------------------->\n<app-dynamic-table *ngIf=\"!isLoading\"\n  [colFields]=\"dynFields\"\n  [colData]=\"tableContent\"\n  (onEdit)=\"edit($event)\"\n></app-dynamic-table>\n\n<!------------------     MODAL - FORM  ------------------ -->\n<app-rf-modal>\n  <div class=\"row py-3\">\n    <div class=\"col-12 d-flex justify-content-between\">\n      <h4 class=\"mb-3\">Add {{ selectedPage }}</h4>\n      <button\n        type=\"button\"\n        class=\"btn btn-primary btn-icon rounded-circle\"\n        (click)=\"closeModal()\"\n      >\n        <i class=\"bi bi-x\"></i>\n      </button>\n    </div>\n  </div>\n  <!--FORM -->\n  <app-dynamic-form\n    [dynFields]=\"dynFields\"\n    (closeModal)=\"closeModal()\"\n  ></app-dynamic-form>\n</app-rf-modal>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RfTableNFormComponent } from './rf-table-n-form.component';\n\nconst routes: Routes = [{ path: '', component: RfTableNFormComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RfTableNFormRoutingModule { }\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ConfigService } from '../../services/config.service';\nimport { RfTableNFormService } from '../../services/rf-table-n-form.service';\nimport { RfModalComponent } from '../rf-modal/rf-modal.component';\nimport { DynamicFormComponent } from './dynamic-form/dynamic-form.component';\nimport { FieldType } from '../../constants/field-info';\n\n@Component({\n  selector: 'app-rf-table-n-form',\n  templateUrl: './rf-table-n-form.component.html',\n  styleUrls: ['./rf-table-n-form.component.scss'],\n})\nexport class RfTableNFormComponent implements OnInit {\n  readonly filterFields = ['id', 'createdOn', 'orgUniqueId'];\n\n  selectedPage: string = '';\n  tableContent: any;\n  dynFields: Array<FieldType<string>> = [] as Array<FieldType<string>>;\n  isLoading: boolean = false;\n  @ViewChild(DynamicFormComponent) private dynFormElt!: DynamicFormComponent;\n  @ViewChild(RfModalComponent) private rfmodal!: RfModalComponent;\n\n  constructor(\n    private route: ActivatedRoute,\n    private rfService: RfTableNFormService,\n    private configSer: ConfigService,\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.subscribe((params) => {\n      // get selected page from sidenav\n      this.selectedPage = params['pagename'];\n      if (this.selectedPage) {\n        // get field names, and info related to it.\n        this.rfService.setCurrentPage(this.selectedPage);\n\n        // REMOVING FIELDS SUCH AS ID, CREATEDON,... CZ THOSE ARE NOT DISPLAYED IN THE FORM\n        this.dynFields = this.rfService\n          .getFields(this.selectedPage)\n          .filter((field:FieldType<any>) => this.filterFields.indexOf(field.key) == -1);\n\n          // GET ALL DATA FOR TABLE\n        this.getAllData(this.selectedPage);\n      }\n    });\n  }\n\n  // EDIT FORM\n  edit(colData: FieldType<any>) {\n    this.dynFormElt.onEditForm(colData);\n    this.rfmodal.open();\n  }\n\n  getAllData(page: string) {\n    this.isLoading = true;\n    this.tableContent = [];\n    if (!page) {\n      return;\n    }\n    // POPULATE TABLE'S DATA\n    this.configSer.getAllData(page).subscribe((data) => {\n      this.tableContent = data;\n      this.isLoading = false;\n    }, (err)=>{\n      this.isLoading = false;\n      alert(err)\n    });\n  }\n\n  //----------OPEN AND CLOSE MODAL-------------\n  openModal() {\n    this.rfmodal.open();\n  }\n  closeModal() {\n    this.rfmodal.close();\n    this.getAllData(this.selectedPage);\n  }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { RfTableNFormRoutingModule } from './rf-table-n-form-routing.module';\nimport { RfTableNFormComponent } from './rf-table-n-form.component';\nimport { DynamicFormComponent } from './dynamic-form/dynamic-form.component';\nimport { DynamicFormFieldSetComponent } from './dynamic-form/dynamic-form-field-set/dynamic-form-field-set.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from '../../shared.module';\nimport { DynamicTableComponent } from './dynamic-table/dynamic-table.component';\n\n\n@NgModule({\n  declarations: [RfTableNFormComponent, DynamicFormComponent,\n    DynamicFormFieldSetComponent,\n    DynamicTableComponent],\n  imports: [\n    CommonModule,\n    RfTableNFormRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SharedModule\n  ]\n})\nexport class RfTableNFormModule { }\n"]}